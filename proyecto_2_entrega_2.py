# -*- coding: utf-8 -*-
"""Proyecto 2 - Entrega 2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SwwYPq0j7p73eqZDcNmIJlCqnf8Vnmj_

#PROYECTO CORTE 2

Presentado por: Paula Andrea Bernal Castillo - 64191069
"""

import numpy as np
import pandas as pd
!pip install wbgapi #instalando una librería del banco mundial
import wbgapi as wb #importando la librería del banco mundial
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

from scipy import stats

import geopandas as gpd
!pip install rioxarray
import rioxarray
import xarray
import numpy as np
from numpy.random import seed
!pip install osmnx
import osmnx

from matplotlib import colors
from matplotlib.patches import Ellipse
import seaborn as sns
!pip install datashader
import datashader
!pip install contextily
import contextily

from shapely.geometry import Polygon
from shapely import geometry

!pip install pysal
import pysal
from pysal.lib import cg as geometry
from pysal.lib import weights
from pysal.viz import splot
from pysal.explore import esda
from pysal.lib import weights

import mapclassify

from splot.esda import plot_moran
from splot import esda as esdaplot

from sklearn.cluster import DBSCAN

from pointpats import centrography

import libpysal
!pip install pygeos
from pygeos import minimum_rotated_rectangle, from_shapely, to_shapely
from pointpats import (
    distance_statistics,
    QStatistic,
    random,
    PointPattern,
)

"""# VARIABLES"""

wb.search('GDP per capita current US')

wb.series.metadata.get('NY.GDP.PCAP.CD')

gdp = wb.data.DataFrame('NY.GDP.PCAP.CD',
                                  economy = ['ARG','COL','BRA','USA','MEX','CHL','CRI','CAN','ECU','PER','PRY','BOL','URY','VEN'],
                                  time=range(2002,2020),
                                  labels=True).reset_index(drop=True).sort_values(by='YR2016', ascending=False).set_index('Country')

gdp

gdp = gdp.unstack().reset_index()

wb.search('unemployment,total')

wb.series.metadata.get('SL.UEM.TOTL.ZS')

unemployment = wb.data.DataFrame('SL.UEM.TOTL.ZS',
                                  economy = ['ARG','COL','BRA','USA','MEX','CHL','CRI','CAN','ECU','PER','PRY','BOL','URY','VEN'],
                                  time=range(2002,2020),
                                  labels=True).dropna().reset_index(drop=True).sort_values(by='YR2016', ascending=False).set_index('Country')

unemployment

unemployment = unemployment.unstack().reset_index()

wb.search('prevalence of undernourishment')

wb.series.metadata.get('SN.ITK.DEFC.ZS')

undernourishment = wb.data.DataFrame('SN.ITK.DEFC.ZS',
                                   economy = ['ARG','COL','BRA','USA','MEX','CHL','CRI','CAN','ECU','PER','PRY','BOL','URY','VEN'],
                                  time=range(2002,2020),
                                  labels=True).dropna().reset_index(drop=True).sort_values(by='YR2016', ascending=False).set_index('Country')

undernourishment

undernourishment = undernourishment.unstack().reset_index()

wb.search('CO2 emissions metric tons per capita')

wb.series.metadata.get('EN.ATM.CO2E.PC')

co2 = wb.data.DataFrame('EN.ATM.CO2E.PC',
                                   economy = ['ARG','COL','BRA','USA','MEX','CHL','CRI','CAN','ECU','PER','PRY','BOL','URY','VEN'],
                                  time=range(2002,2020),
                                  labels=True).dropna().reset_index(drop=True).sort_values(by='YR2016', ascending=False).set_index('Country')

co2

co2 = co2.unstack().reset_index()

wb.search('Life Expectancy at birth,total years')

wb.series.metadata.get('SP.DYN.LE00.IN')

exp = wb.data.DataFrame('SP.DYN.LE00.IN',
                                  economy = ['ARG','COL','BRA','USA','MEX','CHL','CRI','CAN','ECU','PER','PRY','BOL','URY','VEN'],
                                  time=range(2002,2020),
                                  labels=True).dropna().reset_index(drop=True).sort_values(by='YR2016', ascending=False).set_index('Country')

exp

exp = exp.unstack().reset_index()

"""# AGRUPACIÓN DE VARIABLES"""

DT = gdp.merge(exp, on=['level_0', 'Country'], how='outer', suffixes=('_gdp', '_exp')) \
    .merge(undernourishment, on=['level_0', 'Country'], how='outer', suffixes=('_und', '_exp')) \
    .merge(unemployment, on=['level_0', 'Country'], how='outer', suffixes=('_und', '_unemp')) \
    .merge(co2, on=['level_0', 'Country'], how='outer', suffixes=('_co2', '_und'))

"""# RENOMBRAR COLUMNAS"""

DT.columns = ['Year', 'Country', 'gdp', 'expectancy', 'undernourishment','unemployment','co2']

DT.head(20)

"""# RELLENAR DATOS NULOS"""

DT.info()

DT['Country'] = DT['Country'].astype('category')
DT.info()

"""# RELLENAR DATOS FALTANTES"""

for country in DT['Country'].unique():
  DT.loc[DT['Country'] == country, 'gdp'] = DT.loc [DT['Country']== country, 'gdp'].interpolate(method ='linear')

DT.info ()

"""# EXPLORACIÓN ESTADÍSTICA

Media por país
"""

mc = DT.groupby('Country').mean()
print (mc)

"""Media por año"""

my = DT.groupby('Year').mean()
print (my)

"""Varianza por país"""

vc = DT.groupby('Country').var()
print (vc)

"""Varianza por año"""

vy = DT.groupby('Year').var()
print (vy)

"""Desviación estandar por país"""

dc = DT.groupby('Country').std()
print (dc)

"""Desviación estandar por año"""

dy = DT.groupby('Year').std()
print (dy)

"""Correlación"""

for year in DT ['Year'].unique():
  print(year)
  sns.heatmap(DT[DT['Year']==year].corr())
  plt.show ()

"""# EXPLORACIÓN GRÁFICA"""

DT.head(14)

variables = ['gdp', 'undernourishment', 'expectancy', 'co2', 'unemployment']

for variable in variables:
    plt.figure(figsize=(10, 6))
    DT[variable].hist(bins=50, color='skyblue', edgecolor='black')

    plt.xlabel(variable)
    plt.ylabel('Frecuencia')
    plt.title(f'Histograma de {variable}')
    plt.grid(linestyle='-', linewidth=0.5)
    plt.show()

#Determinamos dos variables por continente

south = DT[DT['Country'].isin(['Argentina', 'Uruguay', 'Chile', 'Peru', 'Brazil', 'Ecuador', 'Colombia', 'Paraguay', 'Bolivia', 'Venezuela, RB' ])]
north = DT[DT['Country'].isin(['Canada', 'United States', 'Costa Rica', 'Mexico'])]

#bucle para calcular el promedio anual
for variable in variables:
  LS1 = south.groupby('Year')[[variable]].mean()
  LN1 = north.groupby('Year')[[variable]].mean()

# Creamos el grafico que muestre la relacion de la variable para el grupo de paises

  plt.figure(figsize=(15, 5))

  plt.plot(LS1.index, LS1[variable], label=f'{variable} Sudamérica', color='green', linewidth=2, linestyle='dashed')
  plt.plot(LN1.index, LN1[variable], label=f'{variable} Norte América', color='blue', linewidth=2, linestyle='dashed')

  plt.xlabel('Año')
  plt.ylabel(f'Promedio de {variable}')
  plt.title(f'PROMEDIO ANUAL DE {variable} EN SUR AMERICA Y NORTE AMERICA')
  plt.legend()
  plt.grid(linestyle='-', linewidth=0.5)
  plt.show()

gdp_und = px.scatter(DT, x="Year", y="undernourishment", size = 'gdp', color="Country", title= 'RELACIÓN POR PAÍS ENTRE EL GPD Y LA DESNUTRICIÓN POR AÑO')
gdp_und.show()

gdp_unem = px.scatter(DT, x="Year", y="unemployment", size = 'gdp' , color="Country", title= 'RELACIÓN POR PAÍS ENTRE EL GPD Y EL DESEMPLEO POR AÑO')
gdp_unem.show()

gdp_co2 = px.scatter(DT, x="Year", y="co2",size = 'gdp',  color="Country", title= 'RELACIÓN POR PAÍS EMTRE EL GPD Y EMISIÓN DE C02 POR AÑO')
gdp_co2.show()